{"version":3,"file":"static/js/795.b953f243.chunk.js","mappings":"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","sources":["../node_modules/langchain/dist/prompts/few_shot.js"],"sourcesContent":["import { BaseStringPromptTemplate, } from \"./base.js\";\nimport { checkValidTemplate, renderTemplate, } from \"./template.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nimport { BaseChatPromptTemplate } from \"./chat.js\";\n/**\n * Prompt template that contains few-shot examples.\n * @augments BasePromptTemplate\n * @augments FewShotPromptTemplateInput\n * @example\n * ```typescript\n * const examplePrompt = PromptTemplate.fromTemplate(\n *   \"Input: {input}\\nOutput: {output}\",\n * );\n *\n * const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   new OpenAIEmbeddings(),\n *   HNSWLib,\n *   { k: 1 },\n * );\n *\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt,\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n *\n * // Format the dynamic prompt with the input 'rainy'\n * console.log(await dynamicPrompt.format({ adjective: \"rainy\" }));\n *\n * ```\n */\nexport class FewShotPromptTemplate extends BaseStringPromptTemplate {\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    _getPromptType() {\n        return \"few_shot\";\n    }\n    static lc_name() {\n        return \"FewShotPromptTemplate\";\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new FewShotPromptTemplate(promptDict);\n    }\n    /**\n     * Formats the prompt with the given values.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleStrings = await Promise.all(examples.map((example) => this.examplePrompt.format(example)));\n        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n        return renderTemplate(template, this.templateFormat, allValues);\n    }\n    serialize() {\n        if (this.exampleSelector || !this.examples) {\n            throw new Error(\"Serializing an example selector is not currently supported\");\n        }\n        if (this.outputParser !== undefined) {\n            throw new Error(\"Serializing an output parser is not currently supported\");\n        }\n        return {\n            _type: this._getPromptType(),\n            input_variables: this.inputVariables,\n            example_prompt: this.examplePrompt.serialize(),\n            example_separator: this.exampleSeparator,\n            suffix: this.suffix,\n            prefix: this.prefix,\n            template_format: this.templateFormat,\n            examples: this.examples,\n        };\n    }\n    static async deserialize(data) {\n        const { example_prompt } = data;\n        if (!example_prompt) {\n            throw new Error(\"Missing example prompt\");\n        }\n        const examplePrompt = await PromptTemplate.deserialize(example_prompt);\n        let examples;\n        if (Array.isArray(data.examples)) {\n            examples = data.examples;\n        }\n        else {\n            throw new Error(\"Invalid examples format. Only list or string are supported.\");\n        }\n        return new FewShotPromptTemplate({\n            inputVariables: data.input_variables,\n            examplePrompt,\n            examples,\n            exampleSeparator: data.example_separator,\n            prefix: data.prefix,\n            suffix: data.suffix,\n            templateFormat: data.template_format,\n        });\n    }\n}\n/**\n * Chat prompt template that contains few-shot examples.\n * @augments BasePromptTemplateInput\n * @augments FewShotChatMessagePromptTemplateInput\n */\nexport class FewShotChatMessagePromptTemplate extends BaseChatPromptTemplate {\n    _getPromptType() {\n        return \"few_shot_chat\";\n    }\n    static lc_name() {\n        return \"FewShotChatMessagePromptTemplate\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.examples = fields.examples;\n        this.examplePrompt = fields.examplePrompt;\n        this.exampleSeparator = fields.exampleSeparator ?? \"\\n\\n\";\n        this.exampleSelector = fields.exampleSelector;\n        this.prefix = fields.prefix ?? \"\";\n        this.suffix = fields.suffix ?? \"\";\n        this.templateFormat = fields.templateFormat ?? \"f-string\";\n        this.validateTemplate = fields.validateTemplate ?? true;\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    /**\n     * Formats the list of values and returns a list of formatted messages.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let examples = await this.getExamples(allValues);\n        examples = examples.map((example) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const result = {};\n            this.examplePrompt.inputVariables.forEach((inputVariable) => {\n                result[inputVariable] = example[inputVariable];\n            });\n            return result;\n        });\n        const messages = [];\n        for (const example of examples) {\n            const exampleMessages = await this.examplePrompt.formatMessages(example);\n            messages.push(...exampleMessages);\n        }\n        return messages;\n    }\n    /**\n     * Formats the prompt with the given values.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleMessages = await Promise.all(examples.map((example) => this.examplePrompt.formatMessages(example)));\n        const exampleStrings = exampleMessages\n            .flat()\n            .map((message) => message.content);\n        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n        return renderTemplate(template, this.templateFormat, allValues);\n    }\n    /**\n     * Partially formats the prompt with the given values.\n     * @param values The values to partially format the prompt with.\n     * @returns A promise that resolves to an instance of `FewShotChatMessagePromptTemplate` with the given values partially formatted.\n     */\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((variable) => !(variable in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new FewShotChatMessagePromptTemplate(promptDict);\n    }\n}\n"],"names":["FewShotPromptTemplate","_BaseStringPromptTemp","_inherits","_super","_createSuper","input","_this","_classCallCheck","call","Object","defineProperty","_assertThisInitialized","enumerable","configurable","writable","value","assign","undefined","examples","exampleSelector","Error","validateTemplate","totalInputVariables","inputVariables","partialVariables","concat","keys","checkValidTemplate","prefix","suffix","templateFormat","_createClass","key","_getExamples","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","this","abrupt","selectExamples","stop","_x","apply","arguments","_partial","_callee2","values","_this$partialVariable","newInputVariables","newPartialVariables","promptDict","_context2","filter","iv","_objectSpread","_x2","_format","_callee3","allValues","exampleStrings","template","_this2","_context3","mergePartialAndUserVariables","sent","getExamples","Promise","all","map","example","examplePrompt","format","_toConsumableArray","join","exampleSeparator","renderTemplate","_x3","outputParser","_type","_getPromptType","input_variables","example_prompt","serialize","example_separator","template_format","_deserialize","_callee4","data","_context4","PromptTemplate","deserialize","Array","isArray","_x4","BaseStringPromptTemplate","FewShotChatMessagePromptTemplate","_BaseChatPromptTempla","_super2","fields","_fields$exampleSepara","_fields$prefix","_fields$suffix","_fields$templateForma","_fields$validateTempl","_this3","_getExamples2","_callee5","_context5","_x5","_formatMessages","_callee6","messages","_iterator","_step","exampleMessages","_this4","_context6","result","forEach","inputVariable","_createForOfIteratorHelper","s","n","done","formatMessages","push","t0","e","f","finish","_x6","_format2","_callee7","_this5","_context7","flat","message","content","_x7","_partial2","_callee8","_this$partialVariable2","_context8","variable","_x8","BaseChatPromptTemplate"],"sourceRoot":""}